/**
 *	This-and-That.less
 *
 *	Ken Frederick
 *	ken.frederick@gmx.de
 *
 *	http://kennethfrederick.de/
 *	http://blog.kennethfrederick.de/
 *
 *
 *	This is a framework of CSS styles that create the structure
 *	used throughout This & That (https://github.com/this-and-that/)
 *	I offer it here as a framework for the creation of web-zines.
 *
 *	Given that This & That was designed for use primarily within the
 *	Baker (https://github.com/Simbul/baker) framework, optimizations
 *	or non-webkit (Safari) considerations have not been implemented
 *
 *	Unless you really don't like the defaults I've defined
 *	there's no need to alter any of it...
 *
 *
 *	http://thisetthatmagazine.tumblr.com/
 *	github.com/this-and-that/
 *
 *	Licensed under The MIT License
 *	http://opensource.org/licenses/MIT
 *
 */



//	------------------------------------------------------------------------
//
//	Colors
//
//	------------------------------------------------------------------------

//
//	A collection of generic primary & secondary color definitions
//

// white(s)
@white:				rgba(255, 255, 255, 1.0);
@white-light-gray: 	fade(@white, 45%);
@white-dark-gray:	fade(@white, 83%);

// black(s)
@black:				rgba( 30,  20,  15, 1.0);
@black-light-gray: 	fade(@black, 10%);
@black-dark-gray:	fade(@black, 45%);

// grays
@light-gray:		rgba(233, 232, 231, 1.0);
@dark-gray:			rgba(154, 149, 147, 1.0);

// primary
@red:				rgba(255,  68, 100, 1.0);
@yellow:			rgba(242, 204,  68, 1.0);
@blue:				rgba(  0, 204, 255, 1.0);

// secondary
@orange:			rgba(255, 100,  70, 1.0);
@green:				rgba(  0, 238, 153, 1.0);
@purple:			rgba(144,  39, 142, 1.0);

// links... why not
@link:				rgba( 10, 190, 240, 1.0);



//	white(s)
.white {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @white;
	// }
	a& {
		color: @white;
		border-color: @white;
	}
	a:hover& {
		color: @white;
		border-color: @white;
	}
	div&, .page&, .pages&, .article& {
		background-color: @white;
	}
}
.white-light-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @white-light-gray;
	// }
	a& {
		color: @white-light-gray;
		border-color: @white-light-gray;
	}
	a:hover& {
		color: @light-gray;
		border-color: @light-gray;
	}
	div&, .page&, .pages&, .article& {
		background-color: @white-light-gray;
	}
}
.white-dark-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @white-dark-gray;
	// }
	a& {
		color: @white-dark-gray;
		border-color: @white-dark-gray;
	}
	a:hover& {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	div&, .page&, .pages&, .article& {
		background-color: @white-dark-gray;
	}
}

//	black(s)
.black {
	div&, .page&, .pages&, .article& {
		background-color: @black;
	}
}
.black-light-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @black-light-gray;
	// }
	a& {
		color: @black-light-gray;
		border-color: @black-light-gray;
	}
	a:hover& {
		color: @light-gray;
		border-color: @light-gray;
	}
	div&, .page&, .pages&, .article& {
		background-color: @black-light-gray;
	}
}
.black-dark-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @black-dark-gray;
	// }
	a& {
		color: @black-dark-gray;
		border-color: @black-dark-gray;
	}
	a:hover& {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	div&, .page&, .pages&, .article& {
		background-color: @black-dark-gray;
	}
}

//	grays
.light-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @light-gray;
	// }
	&-link {
		color: @light-gray;
		border-color: @light-gray;
	}
	a:hover& {
		color: @light-gray;
		border-color: @light-gray;
	}
	div&, .page&, .pages&, .article& {
		background-color: @light-gray;
	}
}
.dark-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @dark-gray;
	// }
	&-link {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	a:hover& {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	div&, .page&, .pages&, .article& {
		background-color: @dark-gray;
	}
}

//	primary colors
.red {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @red;
	// }
	&-link {
		color: @red;
		border-color: @red;
	}
	a:hover& {
		color: @red;
		border-color: @red;
	}
	div&, .page&, .pages&, .article& {
		background-color: @red;
	}
}
.yellow {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @yellow;
	// }
	&-link {
		color: @yellow;
		border-color: @yellow;
	}
	a:hover& {
		color: @yellow;
		border-color: @yellow;
	}
	div&, .page&, .pages&, .article& {
		background-color: @yellow;
	}
}
.blue {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @blue;
	// }
	&-link {
		color: @blue;
		border-color: @blue;
	}
	a:hover& {
		color: @blue;
		border-color: @blue;
	}
	div&, .page&, .pages&, .article& {
		background-color: @blue;
	}
}

//	secondary colors
.orange {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @orange;
	// }
	&-link {
		color: @orange;
		border-color: @orange;
	}
	a:hover& {
		color: @orange;
		border-color: @orange;
	}
	div&, .page&, .pages&, .article& {
		background-color: @orange;
	}
}
.green {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @green;
	// }
	&-link {
		color: @green;
		border-color: @green;
	}
	a:hover& {
		color: @green;
		border-color: @green;
	}
	div&, .page&, .pages&, .article& {
		background-color: @green;
	}
}
.purple {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @purple;
	// }
	&-link {
		color: @purple;
		border-color: @purple;
	}
	a:hover& {
		color: @purple;
		border-color: @purple;
	}
	div&, .page&, .pages&, .article& {
		background-color: @purple;
	}
}



//	------------------------------------------------------------------------
//	
//	Z-Indexes
//	
//	------------------------------------------------------------------------

//
//	Instead of applying z-index values willy-nilly, I've devised
//	a layering structure which anyone who has used any design
//	software can quickly understand and implement
//
@layer0:	-200;	// more-bottom layer

@layer1:	0;		// bottom layer
// img
// canvas

@layer2:	200;
// .black-trans
// .white-trans

@layer3:	400;
// #work-menu-overlay

@layer4:	600;
// #navigation
// video
// .holder

@layer5:	800;
// .sticky

@layer6:	1000;	// upper layer
// .gallery
// .caption

// individual layer classes
// these are containers
.layerLoop (@index) when (@index < 7) {
	(~".layer@{index}") {
		position: absolute;
		top: 0px;
		left: 0px;
		z-index: (-200 + (@index * 200));
		// z-index: @{layer}@index;
	}
	.layerLoop(@index + 1);
}
.layerLoop (0) {}
.layerLoop (0);





//	------------------------------------------------------------------------
//
//	Begin Core Definitions
//
//	Core HTML component definitions
//
//	------------------------------------------------------------------------
html {
	background-color: @white;

	// thank you typeplate!
	.base-type(@type-base-weight, @type-base-line-height, @type-base-size, @type-base-family);

	// smoothing
	font-smoothing: antialiased;
	-webkit-font-smoothing: antialiased;
	-khtml-font-smoothing: antialiased;
	-moz-font-smoothing: antialiased;
	-ms-font-smoothing: antialiased;

	// make all text unselectable
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;

	// keep the cursor as an arrow
	cursor: default;

	// Ala Trent Walton
	.css-hyphens (auto);
}


body {
	// set margins
	// margin: 12px 12px 12px 12px;
	// padding: 12px;

	.base-type(@type-base-weight, @type-base-line-height, @type-base-size, @type-base-family);
	letter-spacing: -0.2px;

	// Ala Trent Walton
	.css-hyphens (auto);

	// normal: Indicates that lines may only break at normal word break points.
	// break-word : Indicates that normally unbreakable words may be broken at ...
	// arbitrary points if there are no otherwise acceptable break points in the line.
	.breakword;
	color: @black;
}


p {
	// resets
	-webkit-margin-before: 0px;
	-webkit-margin-after: @type-base-line-height;
	-webkit-margin-start: 0px;
	-webkit-margin-end: 0px;
	margin: 0 0 @type-base-line-height 0;
	// margin: 0 0 0 0;
	// line-height: @type-base-line-height;

	& + p {
		//siblings indentation
		text-indent: @indent-val;
	}
}


// styles for all headings, in the style of @csswizardry
.hN () {
	// voodoo to enable ligatures and kerning
	text-rendering: optimizeLegibility;

	// this fixes huge spaces when a heading wraps onto two lines
	line-height: 1;
	margin-top: 0;

	// position: relative;
	display: inline;
}

// associate h1-h6 tags with their appropriate greek heading
// I prefer to handle line spacing by rules of thirds
// i.e. font-size: 12px; line-height: 15px;
// as opposed to a calculated scale based on type size
// also I define typeface here as well
h1 {
	//
	//	Display
	//	
	font-family: @type-base-family-bold;
	font-weight: normal;
	.alpha;
	.hN;

	& a, & a:hover {
		line-height: @alpha - 6px;
	}
}
h2 {
	font-family: @type-base-family-bold;
	font-weight: normal;
	.beta;
	.hN;

	& a, & a:hover {
		line-height: @beta - 6px;
	}
}
h3 {
	//	
	//	Title
	//	
	font-family: @type-base-family-bold;
	font-weight: normal;
	.gamma;
	.hN;

	& a, & a:hover {
		line-height: @gamma - 3px;
	}
}
h4 {
	font-family: @type-base-family-bold;
	font-weight: normal;
	.delta;
	.hN;

	& a, & a:hover {
		line-height: @delta - 0px;
	}
}
h5 {
	//	
	//	Body Copy
	//
	font-family: @type-base-family;
	font-weight: normal;
	.epsilon;
	.hN;

	& a, & a:hover {
		line-height: @epsilon - 0px;
	}
}
h6 {
	//	
	//	Caption
	//
	.hN;
	font-family: @type-base-family;
	font-weight: normal;
	.zeta;
	.hN;

	& a, & a:hover {
		line-height: @zeta - 0px;
	}
}


//
//	links
//
a {
	text-decoration: none;
	color: @black;
	line-height: @epsilon - 0px;
	.underline-dotted;

	display: inline-block;

	p & {
		display: inline;
	}
}
a:hover {
	text-decoration: none;
	color: @black;
	line-height: @epsilon - 0px;
	// .underline-solid;

	display: inline-block;
	p & {
		display: inline;
	}
}

.underline-dotted {
	border-bottom: 1px dotted @black;
	// border-bottom-style: dotted;
	// border-width: 1px;
	// border-color: @black;
}
.underline-solid {
	border-bottom: 1px solid @black;
	// border-bottom-style: solid;
	// border-width: 1px;
	// border-color: @black;
}


//
//	Images
//
img, object {
	// z-index: @layer1;

	&.scale {
		width: 100%;
	}

	& a, & a:hover {
		border: 1px solid @black;
	}

}


//
//	iframe
//
iframe {
	margin: 0;
	padding: 0;
	border: none;
	overflow: hidden;

	&.scale {
		width: 100%;
	}

}






//	------------------------------------------------------------------------
//
//	Alignments
//
//	------------------------------------------------------------------------
.align-left {
	text-align: left;
}
.align-center {
	text-align: center;
}
.align-right {
	text-align: right;
}

.align-top {
	position: absolute;
	top: 0px;
}
.align-bottom {
	position: absolute;
	bottom: 0px;
}


//
//	centered
//
.center {
	position: relative;
	.align-center;
	width: 100%;

	// margin: 0 auto;
	overflow: hidden;
}


//
//	http://jsfiddle.net/Sw3Jd/
//	http://stackoverflow.com/questions/10088706/twitter-bootstrap-how-to-center-elements-horizontally-or-vertically
//
.holder {
	position: relative;
	// top: 0px;
	// left: 0px;
	// width: 100%;
	height: 100%;
	margin: 0 auto;

	overflow: hidden;
	.align-center;

	// z-index: @layer4;
}
.center-middle {
	position: relative;
	width: 100%;
	height: 100%;
	overflow: hidden;
	display: table;
}
.center-middle .middle {
	display: table-cell;
	vertical-align: middle;
	width: 100%;
	height: 100%;
	margin: 0 auto;
	.align-center;
}






//	------------------------------------------------------------------------
//
//	Scaffolding
//
//	------------------------------------------------------------------------

//
//	baseine vertical grid
//
//	http://blog.thehippo.de/2012/04/programming/do-a-loop-with-less-css/
//	http://css-tricks.com/sass-vs-less/
//
@winheight: 1026; //`window.innerHeight`;
@baseline-grid-iterations: (@winheight)/(~`parseInt( "@{type-base-line-height}" )`);

.baseline-gridLoop (@index) when (@index > 0) {
	@margin-top: ~`parseInt( "@{type-base-line-height}" )`;

	(~".baseline-grid@{index}") {
		@baseline-offset: ( (@index*(~`parseInt( "@{type-base-line-height}" )`)) ); //+ @margin-top );
		margin-top: ~"@{baseline-offset}px";
	}
	.baseline-gridLoop(@index - 1);
}
.baseline-gridLoop (0) {}
.baseline-gridLoop (@baseline-grid-iterations);

.baseline-grid {
	margin-top: ~"@{type-base-line-height}"; //30px;
}


//
//	proportional vertical grid 
//
//	TODO: rename vertical-grid-fluid (?)
//
@vertical-grid-iterations: 100;
.vertical-gridLoop (@index) when (@index > -1) {
	(~".vertical-grid@{index}") {
		@vertical-offset: (@index);
		position: absolute; //relative;
		top: ~"@{vertical-offset}%";
		// height: ~"@{difference}%";
	}
	.vertical-gridLoop(@index - 5);
}
.vertical-gridLoop (-1) {}
.vertical-gridLoop (@vertical-grid-iterations);


//
//	width variance
//
@col-width-iterations: 150;
.col-widthLoop (@index) when (@index > 0) {
	(~".col-width@{index}") {
		@col-width-pct: (@index);
		width: ~"@{col-width-pct}%";
	}
	.col-widthLoop(@index - 2);
}
.col-widthLoop (0) {}
.col-widthLoop (@col-width-iterations);






//	------------------------------------------------------------------------
//
//	Attributes
//
//	------------------------------------------------------------------------

//
//	fit content width to parent width
//
.fit {
	width: 100%;
}

//
//	fit content width to parent width & height
//
.fit-all {
	position: absolute;
	width: 100%;
	height: 100%;
}

.hidden {
	opacity: 0.0;
}




//	------------------------------------------------------------------------
//
//	Container Structures
//
//	Element placement is handled by Bootstrap (twitter.github.io/bootstrap/)
//
//	------------------------------------------------------------------------

//
//	Pages
//
.page {
	position: absolute;
	top: 0px
	left: 0px;
	width: 100%;
	height: 100%;

	margin-top: 0px;
	.align-left;

	border: none;
	// z-index: @layer0;
}


//
//	holder for individual page(s)
//
.pages { 
	position: relative;
	width: 100%;
	height: 100%;
	margin: auto;

	.align-center;
	// z-index: @layer0;
}


//
//	Article
//
//	wrapper for all pages within an article
//
.article {
	.pages;
	overflow: hidden;
}


//
//	Gallery
//
//	wrapper for all pages with a gallery (lightbox)
//
.gallery {
	.article;
	position: fixed;
	top: 0px;
	left: 0px;
	z-index: @layer5;
	// display: none;
	opacity: 1.0;
}


//
//	Navigation
//
//	wrapper for anything non-interactive that should be "fixed"
//
.navigation, #navigation {
	.article;
	position: fixed;
	top: 0px;
	left: 0px;

	z-index: 2000; // specific exception to ensure topmost
}


//
//	Sticky
//
//	wrapper for anything non-interactive that should be "fixed"
//
.sticky {
	.article;
	position: fixed;
	top: 0px;
	left: 0px;

	// http://caniuse.com/pointer-events
	pointer-events: none;
}



//
//	Canvas
//

//
//	Paper.js Specific
//
#canvas {
	width: 100%;
	height: 100%;
	top: 0px;
	left: 0px;
	// position: fixed;
	z-index: @layer5;
}

#rasters {
	visibility: hidden;
}


//
//	Shapes
//
.circle {
	border-radius: 50%;
	width: 100%;
	height: 100%; 
}
.square {
	// TODO
}
.triangle {
	// TODO
}


//
// Transparent box
//
@trans-iterations: 20;
.transLoop (@index) when (@index > -1) {
	(~".trans@{index}") {
		// p&, h1&, h2&, h3&, h4&, h5&, h6&, div& {
		div&, .page&, .pages&, .article& {
			// background-color: @black;
			opacity: (@index*0.05);
			z-index: @layer3;
		}
	}
	.transLoop(@index - 1);
}
.transLoop (-1) {}
.transLoop (@trans-iterations);






//	------------------------------------------------------------------------
//
//	Transition/Animation Classes
//
//	------------------------------------------------------------------------

// TODO: consider using http://h5bp.github.io/Effeckt.css/dist/ instead

// fadeOut
.fadeOut {
	-webkit-transition: opacity 0.25s ease-in-out;
	-moz-transition: opacity 0.25s ease-in-out;
	-ms-transition: opacity 0.25s ease-in-out;
	-o-transition: opacity 0.25s ease-in-out;
	transition: opacity 0.25s ease-in-out;

	// starting value
	-webkit-opacity: 1.0;
	-moz-opacity: 1.0;
	opacity: 1.0;
}
.fadeOut:hover {
	// ending value
	-webkit-opacity: 0.0;
	-moz-opacity: 0.0;
	opacity: 0.0;
}

// fadeOut
// from 10% - 90%
@fade-iterations: 10;
.fadeOutLoop (@index) when (@index > 0) {
	(~".fadeOut@{index}") {
		-webkit-transition: opacity 0.25s ease-in-out;
		-moz-transition: opacity 0.25s ease-in-out;
		-ms-transition: opacity 0.25s ease-in-out;
		-o-transition: opacity 0.25s ease-in-out;
		transition: opacity 0.25s ease-in-out;

		-webkit-opacity: 1.0;
		-moz-opacity: 1.0;
		opacity: 1.0;
	}
	(~".fadeOut@{index}:hover") {
		-webkit-opacity: (@index*0.1);
		-moz-opacity: (@index*0.1);
		opacity: (@index*0.1);
	}

	.fadeOutLoop(@index - 1);
}
.fadeOutLoop (0) {}
.fadeOutLoop (@fade-iterations);

// fadeIn
.fadeIn {
	-webkit-transition: opacity 0.25s ease-in-out;
	-moz-transition: opacity 0.25s ease-in-out;
	-ms-transition: opacity 0.25s ease-in-out;
	-o-transition: opacity 0.25s ease-in-out;
	transition: opacity 0.25s ease-in-out;

	// starting value
	-webkit-opacity: 0.0;
	-moz-opacity: 0.0;
	opacity: 0.0;
}
.fadeIn:hover {
	// ending value
	-webkit-opacity: 1.0;
	-moz-opacity: 1.0;
	opacity: 1.0;
}

// fadeIn
// from 10% - 90%
.fadeInLoop (@index) when (@index > 0) {
	(~".fadeIn@{index}") {
		-webkit-transition: opacity 0.25s ease-in-out;
		-moz-transition: opacity 0.25s ease-in-out;
		-ms-transition: opacity 0.25s ease-in-out;
		-o-transition: opacity 0.25s ease-in-out;
		transition: opacity 0.25s ease-in-out;

		-webkit-opacity: (@index*0.1);
		-moz-opacity: (@index*0.1);
		opacity: (@index*0.1);
	}
	(~".fadeIn@{index}:hover") {
		-webkit-opacity: 1.0;
		-moz-opacity: 1.0;
		opacity: 1.0;
	}

	.fadeInLoop(@index - 1);
}
.fadeInLoop (0) {}
.fadeInLoop (@fade-iterations);


