//
//	this-and-that.less
//
//	Ken Frederick
//	ken.frederick@gmx.de
//
//	http://cargocollective.com/kenfrederick/
//	http://kenfrederick.blogspot.com/
//
//	This is a framework of CSS styles that create the structure
//	used throughout This & That (https://github.com/this-and-that/)
//	I offer it here as a framework for the creation of web-zines.
//
//	Given that This & That was designed for use primarily within the
//	Baker (https://github.com/Simbul/baker) framework, optimizations
//	or non-webkit (Safari) considerations have not been implemented
//
//	Unless you really don't like the defaults I've defined
//	there's no need to alter any of it...
//
//
//	http://thisetthatmagazine.tumblr.com/
//	github.com/this-and-that/
//
//	Licensed under The MIT License
//	http://opensource.org/licenses/MIT
//



//	------------------------------------------------------------------------
//
//	Properties
//
//	------------------------------------------------------------------------

//
//	Scafolding definitions
//

// have outer margins top, right, bottom, left mimic
// the gutter width as defined in bootstrap
@scaffolding-margins: @grid-gutter-width;


//
//	Primary & secondary color definitions
//

// white(s)
@white:				rgba(255, 255, 255, 1.0);
@white-light-gray: 	fade(@white, 45%);
@white-dark-gray:	fade(@white, 83%);

// black(s)
@black:				rgba( 30,  20,  15, 1.0);
@black-light-gray: 	fade(@black, 10%);
@black-dark-gray:	fade(@black, 45%);

// grays
@light-gray:		rgba(233, 232, 231, 1.0);
@dark-gray:			rgba(154, 149, 147, 1.0);

// primary
@red:				rgba(255,  68, 100, 1.0);
@yellow:			rgba(242, 204,  68, 1.0);
@blue:				rgba(  0, 204, 255, 1.0);

// secondary
@orange:			rgba(255, 100,  70, 1.0);
@green:				rgba(  0, 238, 153, 1.0);
@purple:			rgba(144,  39, 142, 1.0);

// links... why not
@link:				rgba( 10, 190, 240, 1.0);

//
//	Transition/Animation definitions
//
@timing-ms: 200ms;



//	------------------------------------------------------------------------
//
//	Colors
//
//	------------------------------------------------------------------------

//	white(s)
.white {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @white;
	// }
	a& {
		color: @white;
		border-color: @white;
	}
	a:hover& {
		color: @white;
		border-color: @white;
	}
	div&, .page&, .article& {
		background-color: @white;
	}
	canvas& {
		background: @white;
	}
}
.white-light-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @white-light-gray;
	// }
	a& {
		color: @white-light-gray;
		border-color: @white-light-gray;
	}
	a:hover& {
		color: @light-gray;
		border-color: @light-gray;
	}
	div&, .page&, .article& {
		background-color: @white-light-gray;
	}
	canvas& {
		background: @white-light-gray;
	}
}
.white-dark-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @white-dark-gray;
	// }
	a& {
		color: @white-dark-gray;
		border-color: @white-dark-gray;
	}
	a:hover& {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	div&, .page&, .article& {
		background-color: @white-dark-gray;
	}
	canvas& {
		background: @white-dark-gray;
	}
}

//	black(s)
.black {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @black;
	// }
	div&, .page&, .article& {
		background-color: @black;
	}
	canvas& {
		background: @black;
	}
}
.black-light-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @black-light-gray;
	// }
	a& {
		color: @black-light-gray;
		border-color: @black-light-gray;
	}
	a:hover& {
		color: @light-gray;
		border-color: @light-gray;
	}
	div&, .page&, .article& {
		background-color: @black-light-gray;
	}
	canvas& {
		background: @black-light-gray;
	}
}
.black-dark-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @black-dark-gray;
	// }
	a& {
		color: @black-dark-gray;
		border-color: @black-dark-gray;
	}
	a:hover& {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	div&, .page&, .article& {
		background-color: @black-dark-gray;
	}
	canvas& {
		background: @black-dark-gray;
	}
}

//	grays
.light-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @light-gray;
	// }
	&-link {
		color: @light-gray;
		border-color: @light-gray;
	}
	a:hover& {
		color: @light-gray;
		border-color: @light-gray;
	}
	div&, .page&, .article& {
		background-color: @light-gray;
	}
	canvas& {
		background: @light-gray;
	}
}
.dark-gray {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @dark-gray;
	// }
	&-link {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	a:hover& {
		color: @dark-gray;
		border-color: @dark-gray;
	}
	div&, .page&, .article& {
		background-color: @dark-gray;
	}
	canvas& {
		background: @dark-gray;
	}
}

//	primary colors
.red {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @red;
	// }
	&-link {
		color: @red;
		border-color: @red;
	}
	a:hover& {
		color: @red;
		border-color: @red;
	}
	div&, .page&, .article& {
		background-color: @red;
	}
	canvas& {
		background: @red;
	}
}
.yellow {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @yellow;
	// }
	&-link {
		color: @yellow;
		border-color: @yellow;
	}
	a:hover& {
		color: @yellow;
		border-color: @yellow;
	}
	div&, .page&, .article& {
		background-color: @yellow;
	}
	canvas& {
		background: @yellow;
	}
}
.blue {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @blue;
	// }
	&-link {
		color: @blue;
		border-color: @blue;
	}
	a:hover& {
		color: @blue;
		border-color: @blue;
	}
	div&, .page&, .article& {
		background-color: @blue;
	}
	canvas& {
		background: @blue;
	}
}

//	secondary colors
.orange {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @orange;
	// }
	&-link {
		color: @orange;
		border-color: @orange;
	}
	a:hover& {
		color: @orange;
		border-color: @orange;
	}
	div&, .page&, .article& {
		background-color: @orange;
	}
	canvas& {
		background: @orange;
	}
}
.green {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @green;
	// }
	&-link {
		color: @green;
		border-color: @green;
	}
	a:hover& {
		color: @green;
		border-color: @green;
	}
	div&, .page&, .article& {
		background-color: @green;
	}
	canvas& {
		background: @green;
	}
}
.purple {
	// p&, h1&, h2&, h3&, h4&, h5&, h6& {
		color: @purple;
	// }
	&-link {
		color: @purple;
		border-color: @purple;
	}
	a:hover& {
		color: @purple;
		border-color: @purple;
	}
	div&, .page&, .article& {
		background-color: @purple;
	}
	canvas& {
		background: @purple;
	}
}



//	------------------------------------------------------------------------
//	
//	Z-Indexes
//	
//	------------------------------------------------------------------------

//
//	Instead of applying z-index values willy-nilly, I've devised
//	a layering structure which anyone who has used any design
//	software can quickly understand and implement
//
@layer-0:	-200;	// more-bottom layer
// .page

@layer-1:	0;		// bottom layer

@layer-2:	200;

@layer-3:	400;
// .trans

@layer-4:	600;
// .gallery

@layer-5:	800;
// #scroll-forward
// #scroll-back

@layer-6:	1000;	// upper layer

// @layer-7: 2000;
// #navigation


// individual layer classes
// these are containers
.layerLoop (@index) when (@index < 7) {
	.layer-@{index} {
		position: relative;
		top: 0px;
		left: 0px;
		width: 100%;
		z-index: (-200 + (@index * 200));
		// z-index: @{layer-}@index;
	}
	.layerLoop(@index + 1);
}
.layerLoop (0) {}
.layerLoop (0);





//	------------------------------------------------------------------------
//
//	Begin Core Definitions
//
//	Core HTML component definitions
//
//	------------------------------------------------------------------------
html {
	background-color: @white;

	// thank you typeplate!
	.base-type(@type-base-weight, @type-base-line-height, @type-base-size, @type-base-family);

	// smoothing
	font-smoothing: antialiased;
	-webkit-font-smoothing: antialiased;
	-khtml-font-smoothing: antialiased;
	-moz-font-smoothing: antialiased;
	-ms-font-smoothing: antialiased;

	// make all text unselectable
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;

	// keep the cursor as an arrow
	cursor: default;

	// Ala Trent Walton
	.css-hyphens (auto);
}


body {
	// set margins
	// margin: 12px 12px 12px 12px;
	// padding: 12px;

	.base-type(@type-base-weight, @type-base-line-height, @type-base-size, @type-base-family);
	letter-spacing: -0.2px;

	// Ala Trent Walton
	.css-hyphens (auto);

	// normal: Indicates that lines may only break at normal word break points.
	// break-word : Indicates that normally unbreakable words may be broken at ...
	// arbitrary points if there are no otherwise acceptable break points in the line.
	.breakword;
	color: @black;
}


p {
	// resets
	-webkit-margin-before: 0px;
	-webkit-margin-after: (0px + @type-base-line-height);
	-webkit-margin-start: 0px;
	-webkit-margin-end: 0px;
	margin: 0 0 (0px + @type-base-line-height) 0;
	// margin: 0 0 0 0;
	// line-height: (0px + @type-base-line-height);

	& + p {
		//siblings indentation
		text-indent: @indent-val;
	}
}


// styles for all headings, in the style of @csswizardry
.hN () {
	// voodoo to enable ligatures and kerning
	text-rendering: optimizeLegibility;

	// this fixes huge spaces when a heading wraps onto two lines
	line-height: 1;
	margin-top: 0;

	// position: relative;
	display: inline;
}

// associate h1-h6 tags with their appropriate greek heading
// I prefer to handle line spacing by rules of thirds
// i.e. font-size: 12px; line-height: 15px;
// as opposed to a calculated scale based on type size
// also I define typeface here as well
h1 {
	//
	//	Display
	//	
	font-family: @type-base-family-bold;
	font-weight: normal;
	.alpha;
	.hN;

	& a, & a:hover {
		line-height: @alpha - 6px;
	}
}
h2 {
	font-family: @type-base-family-bold;
	font-weight: normal;
	.beta;
	.hN;

	& a, & a:hover {
		line-height: @beta - 6px;
	}
}
h3 {
	//	
	//	Title
	//	
	font-family: @type-base-family-bold;
	font-weight: normal;
	.gamma;
	.hN;

	& a, & a:hover {
		line-height: @gamma - 3px;
	}
}
h4 {
	font-family: @type-base-family-bold;
	font-weight: normal;
	.delta;
	.hN;

	& a, & a:hover {
		line-height: @delta - 0px;
	}
}
h5 {
	//	
	//	Body Copy
	//
	font-family: @type-base-family;
	font-weight: normal;
	.epsilon;
	.hN;

	& a, & a:hover {
		line-height: @epsilon - 0px;
	}
}
h6 {
	//	
	//	Caption
	//
	.hN;
	font-family: @type-base-family;
	font-weight: normal;
	.zeta;
	.hN;

	& a, & a:hover {
		line-height: @zeta - 0px;
	}

}

.monospaced {
	font-family: Monaco, Menlo, Consolas, "Courier New", monospace;
}


//
//	links
//
a {
	text-decoration: none;
	color: @black;
	line-height: @epsilon - 0px;
	.underline-dotted;

	display: inline-block;

	p & {
		display: inline;
	}
}
a:hover {
	text-decoration: none;
	color: @black;
	line-height: @epsilon - 0px;
	// .underline-solid;
	.underline-none;

	display: inline-block;
	p & {
		display: inline;
	}
}

.underline-dotted {
	border-bottom: 1px dotted @black;
	// border-bottom-style: dotted;
	// border-width: 1px;
	// border-color: @black;
}
.underline-solid {
	border-bottom: 1px solid @black;
	// border-bottom-style: solid;
	// border-width: 1px;
	// border-color: @black;
}
.underline-none {
	border-bottom: 0px;
	text-decoration: none;
}


//
//	Images
//
img, object {
	&.scale {
		width: 100%;
	}

	& a {
		.underline-none;
	}
	& a:hover {
		.underline-solid;
	}
}


//
//	iframe
//
iframe {
	margin: 0;
	padding: 0;
	border: none;
	overflow: hidden;

	&.scale {
		width: 100%;
		height: 100%;
	}

}






//	------------------------------------------------------------------------
//
//	Alignments
//
//	------------------------------------------------------------------------
.align-left {
	text-align: left;
	// padding-left: @scaffolding-margins;
	float: left;
}

//
//	centered
//
.align-center {
	text-align: center;
}
.center {
	// position: relative;
	.align-center;
	width: 100%;

	// margin: 0 auto;
	overflow: hidden;
}
.align-middle {
	position: relative;
	width: 100%;
	height: 100%;
	margin: 0 auto;

	overflow: hidden;
	display: table;

	& .middle {
		display: table-cell;
		vertical-align: middle;
		width: 100%;
		height: 100%;
		margin: 0 auto;
		.align-center;
	}
}

.align-right {
	text-align: right;
	// padding-right: @scaffolding-margins;
	float: right;
}

.align-top {
	position: absolute;
	top: 0px;
	width: 100%;

	// a right padding is needed so that elements
	// respect the global outer margins
	// +20 pushes content below status bar
	padding: (@scaffolding-margins+20) @scaffolding-margins 0 0;
}
.align-bottom {
	position: absolute;
	bottom: 0px;
	width: 100%;

	// a right padding is needed so that elements
	// respect the global outer margins
	padding: 0 @scaffolding-margins @scaffolding-margins 0;
}


//
//	http://jsfiddle.net/Sw3Jd/
//	http://stackoverflow.com/questions/10088706/twitter-bootstrap-how-to-center-elements-horizontally-or-vertically
//
.holder {
	position: relative;
	// top: 0px;
	// left: 0px;
	// width: 100%;
	height: 100%;
	margin: 0 auto;

	overflow: hidden;
	.align-center;
}






//	------------------------------------------------------------------------
//
//	Scaffolding
//
//	------------------------------------------------------------------------

.baseline-grid-view {
	position: fixed;
	top: 0px;
	left: 0px;
	width: 100%;

	opacity: 0.0;
	z-index: 1500;

	pointer-events: none;
}

//
//	baseine vertical grid
//
//	http://blog.thehippo.de/2012/04/programming/do-a-loop-with-less-css/
//	http://css-tricks.com/sass-vs-less/
//
@winheight: 1026; //`window.innerHeight`;
@baseline-grid-iterations: floor( @winheight/@type-base-line-height );

.baseline-gridLoop (@index) when (@index > 0) {
	.baseline-grid-@{index} {
		.align-top;
		// position: fixed; //relative;
		// margin-top: 0px + ((@index+1) * @type-base-line-height);
		margin-top: 0px + (@index * @type-base-line-height);
	}
	.baseline-gridLoop(@index - 1);
}
.baseline-gridLoop (0) {}
.baseline-gridLoop (@baseline-grid-iterations);

.baseline-grid {
	.align-top;
	margin-top: 0px; // (0px + @type-base-line-height);
}


//
//	proportional vertical grid 
//
//	TODO: rename vertical-grid-fluid (?)
//
@vertical-grid-iterations: 100;
.vertical-gridLoop (@index) when (@index > -1) {
	.vertical-grid-@{index} {
		@vertical-offset: (@index);
		position: absolute; // relative;
		top: ~"@{vertical-offset}%";
		// height: ~"@{difference}%";
	}
	.vertical-gridLoop(@index - 5);
}
.vertical-gridLoop (-1) {}
.vertical-gridLoop (@vertical-grid-iterations);


//
//	width variance
//
@col-width-iterations: 150;
.col-widthLoop (@index) when (@index > 0) {
	.col-width-@{index} {
		@col-width-pct: (@index);
		width: ~"@{col-width-pct}%";
	}
	.col-widthLoop(@index - 2);
}
.col-widthLoop (0) {}
.col-widthLoop (@col-width-iterations);






//	------------------------------------------------------------------------
//
//	Attributes
//
//	------------------------------------------------------------------------

//
//	fit content width to parent width
//
.fit {
	width: 100%;
	height: auto;
}

//
//	fit content width to parent width & height
//
.fit-all {
	position: absolute;
	width: 100%;
	height: 100%;
}

.invisible {
	display: none;

	// -webkit-opacity: 0.0;
	// -moz-opacity: 0.0;
	// opacity: 0.0;
}






//	------------------------------------------------------------------------
//
//	Container Structures
//
//	Element placement is handled by Bootstrap (twitter.github.io/bootstrap/)
//
//	------------------------------------------------------------------------

//
//	Pages
//
.page {
	.article;
	position: relative;
	// top: 0px
	// left: 0px;
	width: 100%;
	height: auto; // 100%;

	// margin-top: 0px;
	.align-left;

	// border: none;
	z-index: @layer-0;
}


//
//	Article
//
//	wrapper for all pages within an article
//
.article {
	// prevents flickering in safari
	// http://stackoverflow.com/questions/15751012/css-transform-causes-flicker-in-safari-but-only-when-the-browser-is-2000px-w
	-webkit-transform-style: preserve-3d;
	-webkit-backface-visibility: hidden;
}

.article-author-container {
	// .invisible;
	-webkit-transition: opacity @timing-ms ease-in-out;
	-moz-transition: opacity @timing-ms ease-in-out;
	-ms-transition: opacity @timing-ms ease-in-out;
	-o-transition: opacity @timing-ms ease-in-out;
	transition: opacity @timing-ms ease-in-out;

	-webkit-opacity: 1.0;
	-moz-opacity: 1.0;
	opacity: 1.0;
}

.article-interview-container {
	// .invisible;
	-webkit-transition: opacity @timing-ms ease-in-out;
	-moz-transition: opacity @timing-ms ease-in-out;
	-ms-transition: opacity @timing-ms ease-in-out;
	-o-transition: opacity @timing-ms ease-in-out;
	transition: opacity @timing-ms ease-in-out;

	-webkit-opacity: 0.0;
	-moz-opacity: 0.0;
	opacity: 0.0;
}

//
//	Gallery
//
//	wrapper for all pages with a gallery (lightbox)
//
.gallery {
	.article;
	position: fixed;
	width: 100%;
	top: 100%;
	top: 0px;
	left: 0px;

	z-index: @layer-4;

	// .invisible;
	-webkit-transition: opacity @timing-ms ease-in-out;
	-moz-transition: opacity @timing-ms ease-in-out;
	-ms-transition: opacity @timing-ms ease-in-out;
	-o-transition: opacity @timing-ms ease-in-out;
	transition: opacity @timing-ms ease-in-out;

	-webkit-opacity: 0.0;
	-moz-opacity: 0.0;
	opacity: 0.0;

	pointer-events: none;
}

.gallery-navigation {
	// .invisible;
	-webkit-transition: opacity @timing-ms ease-in-out;
	-moz-transition: opacity @timing-ms ease-in-out;
	-ms-transition: opacity @timing-ms ease-in-out;
	-o-transition: opacity @timing-ms ease-in-out;
	transition: opacity @timing-ms ease-in-out;

	-webkit-opacity: 0.0;
	-moz-opacity: 0.0;
	opacity: 0.0;

	pointer-events: none;
	z-index: @layer-6;
}


//
//	Navigation
//
//	wrapper for anything non-interactive that should be "fixed"
//
.navigation, #navigation {
	position: fixed;
	width: 100%;
	// height: auto; // 100%;
	top: 0px;
	left: 0px;
	padding: @scaffolding-margins;

	z-index: @layer-6;
}

#scroll-back {
	background-color: @black-light-gray;
	position: fixed;
	height: 100%;
	width: (@scaffolding-margins*3);
	// top: 50%;
	left: 0px;

	z-index: @layer-5;
}
#scroll-forward {
	background-color: @black-light-gray;
	position: fixed;
	height: 100%;
	width: (@scaffolding-margins*3);
	// top: 50%;
	right: 0px; 

	z-index: @layer-5;
}



//
//	Header
//
//	wrapper for anything non-interactive that should be "fixed"
//
#header {
	.article;
	position: fixed;
	top: 0px;
	left: 0px;

	// http://caniuse.com/pointer-events
	pointer-events: none;
}



//
//	Canvas
//

//
//	Paper.js Specific
//
#canvas {
	width: 100%;
	height: 100%;
	top: 0px;
	left: 0px;
}

#rasters {
	visibility: hidden;
}


//
//	Shapes
//
.circle {
	border-radius: 50%;
	width: 100%;
	height: 100%; 
}
.square {
	// TODO
}
.triangle {
	// TODO
}


//
// Transparent box
//
@trans-iterations: 20;
.transLoop (@index) when (@index > -1) {
	.trans-@{index} {
		// p&, h1&, h2&, h3&, h4&, h5&, h6&, div& {
		div&, .page&, .article& {
			// background-color: @black;
			opacity: (@index*0.05);
			z-index: @layer-3;
		}
	}
	.transLoop(@index - 1);
}
.transLoop (-1) {}
.transLoop (@trans-iterations);






//	------------------------------------------------------------------------
//
//	Transition/Animation Classes
//
//	------------------------------------------------------------------------

// TODO: consider using http://h5bp.github.io/Effeckt.css/dist/ instead
.fade-out {
	-webkit-transition: opacity @timing-ms ease-in-out;
	-moz-transition: opacity @timing-ms ease-in-out;
	-ms-transition: opacity @timing-ms ease-in-out;
	-o-transition: opacity @timing-ms ease-in-out;
	transition: opacity @timing-ms ease-in-out;

	// starting value
	-webkit-opacity: 0.0;
	-moz-opacity: 0.0;
	opacity: 0.0;

	// pointer-events: none;
}
.fade-in {
	-webkit-transition: opacity @timing-ms ease-in-out;
	-moz-transition: opacity @timing-ms ease-in-out;
	-ms-transition: opacity @timing-ms ease-in-out;
	-o-transition: opacity @timing-ms ease-in-out;
	transition: opacity @timing-ms ease-in-out;

	// starting value
	-webkit-opacity: 1.0;
	-moz-opacity: 1.0;
	opacity: 1.0;

	pointer-events: auto;
}

// fade-out-over
.fade-out-over {
	.fade-in;
}
.fade-out-over:hover {
	// ending value
	.fade-out;
}

// fade-out-over
// from 10% - 90%
@fade-iterations: 10;
.fade-out-overLoop (@index) when (@index > 0) {
	.fade-out-over-@{index} {
		.fade-in;
	}
	.fade-out-over-@{index}:hover {
		-webkit-opacity: (@index*0.1);
		-moz-opacity: (@index*0.1);
		opacity: (@index*0.1);
	}

	.fade-out-overLoop(@index - 1);
}
.fade-out-overLoop (0) {}
.fade-out-overLoop (@fade-iterations);

// fade-in-over
.fade-in-over {
	.fade-out;
}
.fade-in-over:hover {
	.fade-in;
}

// fade-in-over
// from 10% - 90%
.fade-in-overLoop (@index) when (@index > 0) {
	.fade-in-over-@{index} {
		-webkit-transition: opacity @timing-ms ease-in-out;
		-moz-transition: opacity @timing-ms ease-in-out;
		-ms-transition: opacity @timing-ms ease-in-out;
		-o-transition: opacity @timing-ms ease-in-out;
		transition: opacity @timing-ms ease-in-out;

		-webkit-opacity: (@index*0.1);
		-moz-opacity: (@index*0.1);
		opacity: (@index*0.1);
	}
	.fade-in-over-@{index}:hover {
		.fade-out;
	}

	.fade-in-overLoop(@index - 1);
}
.fade-in-overLoop (0) {}
.fade-in-overLoop (@fade-iterations);



//	------------------------------------------------------------------------
//
//	Interaction Handling
//
//	------------------------------------------------------------------------





